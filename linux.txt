cat index.js  查看文件
touch index.js 创建文件
ls 查看所有文件
ls -F 查看目录中的文件
ls -l 显示文件和目录的详细资料
ls -a 显示隐藏文件
cd 进入个人的主目录
cd -显示工作路径
cd ..  返回上级目录
mkdir dir1 创建一个叫做 'dir1' 的目录'
mkdir dir1 dir2 同时创建两个目录
mkdir -p /tmp/dir1/dir2 创建一个目录树
rm -f file1 删除一个叫做 'file1' 的文件'
rmdir dir1 删除一个叫做 'dir1' 的目录'
rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容
rm -rf dir1 dir2 同时删除两个目录及它们的内容
mv dir1 new_dir 重命名/移动 一个目录
cp file1 file2 复制一个文件
cp dir/* . 复制一个目录下的所有文件到当前工作目录
cp -a /tmp/dir1 . 复制一个目录到当前工作目录
cp -a dir1 dir2 复制一个目录
ln -s file1 lnk1 创建一个指向文件或目录的软链接
ln file1 lnk1 创建一个指向文件或目录的物理链接
touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)
vim index.js  进入编辑  按i进入编辑可粘贴按ESC退出编辑模式，保存退出:wq,不保存退出:q,强制不保存退出:q!
netstat -tpln  查看服务端口是否存在
netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息

查看当前tcp监听端口
netstat -tl

查看当前tcp监听端口, 需要显示监听的程序名,当不清楚mysql的监听端口时比较好用
netstat -tlp

只查看mysql的监听端口,当前启动的mysql端口为34006,明确知道mysql监听端口时使用
netstat -tl | grep 3306

23425是当前mysql的PID
netstat -tap | grep 34006 | grep 23425

检查端口80被那个进程占用
netstat -ano | findstr  "80"
杀掉占用80端口进程75236
tasklist | findstr "7536"

通过iptables将80端口跳转到8080端口
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080


以下是创建软链接
ln -s /usr/local/node-v6.10.2-linux-x64/bin/node /usr/local/bin/node
ln -s /usr/local/node-v6.10.2-linux-x64/bin/npm /usr/local/bin/npm

cd ..  返回上一级

下载远程文件
wget https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz

上传文件
scp index.js

解压文件
tar xvf node-v6.10.2-linux-x64.tar.xz
tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz -C /usr/local/mysql

若您执行fdisk -l命令，发现没有 /dev/xvdb 标明您的云服务无数据盘，那么您无需进行挂载


/*************npm命令**************/
npm install express 安装模块
npm install express@3.0.0 安装3.0.0版本的模块
npm install express --save  安装模块的同时写入到package.json
npm install express -g 全局安装模块

npm list  查看所安装模块的版本号，如在node_modules下运行 nom list jquery

ctrl+c结束命令

设置npm安装程序时的默认位置
npm config set prefix "D:\Program Files\nodejs\X64\node_global"

 设置npm安装程序时的缓存位置
npm config set cache "D:\Program Files\nodejs\X64\node_cache"

设置环境变量NODE_PATH 
NODE_PATH = D:\Program Files\nodejs\X64\node_global\node_modules




/*************项目有关的**************/
安装信息
/usr/local/nginx/nginx
/root/nvm
/root/nvm/versions/node/v4.8.4/bin/pm2
/usr/local/mongodb/
/root/nvm/versions/node/v4.8.4/
/root/nvm/versions/node/v8.7.0/node_modules/
/root/nvm/versions/node/v4.8.4
配置信息
Nginx：/usr/local/nginx/nginx.conf 
MongoDB：/var/mongodb/data 

cd /root/nvm/versions/node/v4.8.4/lib/node_modules/pm2/
/home/wwwroot/discuz
/usr/local/nginx/nginx.conf
/etc/nginx/conf.d/default.conf

启动nginx
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/nginx.conf

server{
listen 80;
server_name 116.62.172.0;
location{
proxy_pass http://127.0.0.1:3000;
}
}

IP地址：
(公) 116.62.172.0
(内) 172.16.252.11

[pm2@2.7.2] link /root/nvm/versions/node/v8.7.0/bin/pm2@ -> /root/nvm/versions/node/v8.7.0/lib/node_modules/pm2/bin/pm2
[pm2@2.7.2] link /root/nvm/versions/node/v8.7.0/bin/pm2-dev@ -> /root/nvm/versions/node/v8.7.0/lib/node_modules/pm2/bin/pm2-dev
[pm2@2.7.2] link /root/nvm/versions/node/v8.7.0/bin/pm2-docker@ -> /root/nvm/versions/node/v8.7.0/lib/node_modules/pm2/bin/pm2-docker
[pm2@2.7.2] link /root/nvm/versions/node/v8.7.0/bin/pm2-runtime@ -> /root/nvm/versions/node/v8.7.0/lib/node_modules/pm2/bin/pm2-runtime
[root@iZbp1acq02ar6zagh2javaZ src]# pm2 -v



/********************************
***java
****
**********************************/
yum list java*  查看阿里云有的java包
yum list available java*
yum install java-1.8.0-openjdk*  通过如下命令安装jdk
java -version



whereis java
which java （java执行路径）
echo $JAVA_HOME
echo $PATH

安装mysql
http://blog.csdn.net/dongdong9223/article/details/52536675

whereis mysql 查看所有的文件路径
which mysql  运行文件所在地址

安装完成路径:
1、数据库目录
/var/lib/mysql/
2、配置文件
/usr/share/mysql(mysql.server命令及配置文件)
3、启动脚本
/etc/rc.d/init.d/(启动脚本文件mysql的目录) 
4、相关命令
/usr/bin(mysqladmin mysqldump等命令)

service mysqld status   查看mysql是否启动
service mysqld restart  重启
service mysqld start  启动
service mysqld stop  停止

使用下面命令，然后输入密码
mysql -u root -p

修改mysql密码
方法一：
在mysql系统外，使用mysqladmin
# mysqladmin -u root -p password "test123"
Enter password: 【输入原来的密码】

方法二：
通过登录mysql系统，设置密码的方法语句以分号结束
mysql -u root -p
Enter password: 【输入原来的密码】
mysql> use mysql;
mysql> update user set password=passworD("test") where user='root';
mysql> flush privileges;
mysql> exit;     



阿里云配置mysql远程连接
mysql -u root -h localhost -p
Enter password: 【输入原来的密码】
mysql> use mysql;
#将host设置为%表示任何ip都能连接mysql，当然您也可以将host指定为某个ip
update user set host='%' where user='root' and host='localhost';
flush privileges;        #刷新权限表，使配置生效

#将host设置为localhost表示只能本地连接mysql
update user set host='localhost' where user='root';

可以添加一个用户名为yuancheng，密码为123456，权限为%（表示任意ip都能连接）的远程连接用户。命令参考如下：
grant all on *.* to 'yuancheng'@'%' identified by '123456';
flush privileges;



导入数据
mysqldump -u 用户名 -p密码 数据库名 > 导出的文件名
mysqldump -u root -pebiz eblog > /home/soft/mysqlbak.sql


mysql>select version()

mysql配置文件
/etc/my.cnf

mysql帮助
https://help.aliyun.com/knowledge_detail/41104.html#端口监听


/var/lib/mysql    mysql目录

k58

tomcat启动和关闭
service  tomcat  start
service  tomcat  stop

启动mysqld 服务，以及tomcat

-- 5. 启动mysqld 服务，以及tomcat 
cd /usr/local/webapp
mkdir mysql_data 
# 必须修改所属用户哦，如果修改了mysql的数据文件保存目录的话 
chown mysql:mysql mysql_data 
service mysqld start 
/usr/local/tomcat/bin/startup.sh
 

5.1 设置Tomcat自动启动

有很多种方式，比如设置服务，或者使用 rc.local 进行加载。

修改 /etc/rc.d/rc.local 文件:
vim /etc/rc.d/rc.local
 

在里面增加启动Tomcat的脚本,然后保存. 最终结果如下所示：
 
[root@xxx bin]# cat /etc/rc.d/rc.local 
#!/bin/sh 
# 
# This script will be executed *after* all the other init scripts. 
# You can put your own initialization stuff in here if you don't 
# want to do the full Sys V style init stuff. 
touch /var/lock/subsys/local
# start tomcat 
/usr/local/tomcat/bin/startup.sh
 

可以看到, 我们只增加了最后一行。意思是在Linux启动完成后，加载其他初始脚本完毕之后, 执行启动Tomcat的命令.





